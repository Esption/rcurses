/* automatically generated by rust-bindgen */

pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type pid_t = __pid_t;
pub type cc_t = ::libc::c_uchar;
pub type speed_t = ::libc::c_uint;
pub type tcflag_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy, Debug)]
pub struct Struct_termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
impl ::std::clone::Clone for Struct_termios {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_termios {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "c")]
extern "C" {
    pub fn cfgetospeed(__termios_p: *const Struct_termios) -> speed_t;
    pub fn cfgetispeed(__termios_p: *const Struct_termios) -> speed_t;
    pub fn cfsetospeed(__termios_p: *mut Struct_termios, __speed: speed_t)
     -> ::libc::c_int;
    pub fn cfsetispeed(__termios_p: *mut Struct_termios, __speed: speed_t)
     -> ::libc::c_int;
    pub fn cfsetspeed(__termios_p: *mut Struct_termios, __speed: speed_t)
     -> ::libc::c_int;
    pub fn tcgetattr(__fd: ::libc::c_int, __termios_p: *mut Struct_termios)
     -> ::libc::c_int;
    pub fn tcsetattr(__fd: ::libc::c_int, __optional_actions: ::libc::c_int,
                     __termios_p: *const Struct_termios) -> ::libc::c_int;
    pub fn cfmakeraw(__termios_p: *mut Struct_termios) -> ();
    pub fn tcsendbreak(__fd: ::libc::c_int, __duration: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tcdrain(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn tcflush(__fd: ::libc::c_int, __queue_selector: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tcflow(__fd: ::libc::c_int, __action: ::libc::c_int)
     -> ::libc::c_int;
    pub fn tcgetsid(__fd: ::libc::c_int) -> __pid_t;
}
